/*
 * File: base.js
 *
 * Author: Steve Eriksson - steve.eriksson@gmail.com
 *
 * This file contains basic functionality for making a SVG generated by GraphViz
 * based on Telenor POP-file configuration.
 * 
 */


// Global variable for the SVG namespace
var svgNS = "http://www.w3.org/2000/svg";

// Namespace object
var base = {};

// "Constants"
base.svgRoot       = document.documentElement;
base.viewBoxWidth  = parseFloat( base.svgRoot.getAttribute( 'viewBox' ).split( ' ' )[2] );
base.viewBoxHeight = parseFloat( base.svgRoot.getAttribute( 'viewBox' ).split( ' ' )[3] );
base.viewBoxCenter = { x: (base.viewBoxWidth  / 2), y: (base.viewBoxHeight / 2) };


/*
 * Helper functions for retrieveing the graphical elements in either a 
 * node group or edge group.
 * All mouse interactions in the document are triggered by elements in those
 * groups.
 */

// Get the ellipse from the node group
base.getNodeElement = function( evt ) {
    return evt.target.parentNode.getElementsByTagName( 'ellipse' )[0];
};

// Get the path from the edge group
base.getEdgeElement = function( evt ) {
    return evt.target.parentNode.getElementsByTagName( 'path' )[0];
};


/*
 * Get the topmost group representing the graph.
 * This assumes that the graph group ID isn't changed
 * from the default name given by GraphViz
 */
base.getGraphGroup = function() {
    return document.getElementById( 'graph0' );
};

/*
 * Return the name of the POP
 *
 * Parameter: nodeGroup - the group element of the current node
 */
base.getPOP = function( nodeGroup ) {
    return nodeGroup.getElementsByTagName( 'text' )[0];
};

/* 
 * Creates a dispatch object that holds a number of functions that can be called.
 * Functions are stored in a map where key = function description and 
 * value = function object.
 * Functions can be removed, added and listed in runtime.
 */
base.makeDispatch = function() {
    
    var funMap = {}; // function map
    
    // Return the interface to the dispatch object
   return { 
       addFunction: function( name, fun ) {
           funMap[name] = fun;
       },
       
       removeFunction: function( name ) {
           delete funMap[name];
       },
       
       listFunctions: function() {
           var names = [];
           for (name in funMap) {
               // hasOwnProperty is used so that things from the prototype chain
               // isn't dragged up here
               if (funMap.hasOwnProperty( name )) {
                   names.push( name );
               }
           }
           return names;
       },

        handleEvent: function( evt ) {
            for (name in funMap) {
                if (funMap.hasOwnProperty( name )) {
                    funMap[name]( evt );
                }
            }
        }

   }; // end return
}


// Create event dispatchers
base.edgeMouseOutDispatch  = base.makeDispatch();
base.edgeMouseOverDispatch = base.makeDispatch();
base.edgeMouseDownDispatch = base.makeDispatch();
base.edgeMouseUpDispatch   = base.makeDispatch();
base.edgeClickDispatch     = base.makeDispatch();

base.nodeMouseOutDispatch  = base.makeDispatch();
base.nodeMouseOverDispatch = base.makeDispatch();
base.nodeMouseDownDispatch = base.makeDispatch();
base.nodeMouseUpDispatch   = base.makeDispatch();
base.nodeClickDispatch     = base.makeDispatch();

base.svgLoadDispatch = base.makeDispatch();


/*
 * Function wrappers, makes it easier to call events from an XML file
 */
function node_onclick( evt )     { base.nodeClickDispatch.handleEvent( evt );     }
function node_onmousedown( evt ) { base.nodeMouseDownDispatch.handleEvent( evt ); }
function node_onmouseup( evt )   { base.nodeMouseUpDispatch.handleEvent( evt );   }
function node_onmouseover( evt ) { base.nodeMouseOverDispatch.handleEvent( evt ); }
function node_onmouseout( evt )  { base.nodeMouseOutDispatch.handleEvent( evt );  }
function node_onmousedown( evt ) { base.nodeMouseDownDispatch.handleEvent( evt ); }
function node_onmouseup( evt )   { base.nodeMouseUpDispatch.handleEvent( evt );   }

function edge_onmousedown( evt ) { base.edgeMouseDownDispatch.handleEvent( evt ); }
function edge_onmouseup( evt )   { base.edgeMouseUpDispatch.handleEvent( evt );   }
function edge_onclick( evt )     { base.edgeClickDispatch.handleEvent( evt );     }
function edge_onmouseover( evt ) { base.edgeMouseOverDispatch.handleEvent( evt ); }
function edge_onmouseout( evt )  { base.edgeMouseOutDispatch.handleEvent( evt );  }
function edge_onmousedown( evt ) { base.edgeMouseDownDispatch.handleEvent( evt ); }
function edge_onmouseup( evt )   { base.edgeMouseUpDispatch.handleEvent( evt );   }

function svg_onload( evt )       { base.svgLoadDispatch.handleEvent( evt ); }


/*
 * Creates a XMLHttpRequest object and perform call to server.
 * The response should be in plain ASCII
 *
 * Param: method - POST or GET
 * Param: url - The URL
 * Param: fun - User provided function to be called
 *              when all went well
 */
base.doPlainXHR = function( method, url, fun ) {
    var xhr = new XMLHttpRequest();
    xhr.open( method, url );
    xhr.onreadystatechange = function() {

        // Request is done
        if (xhr.readyState == 4) {

            // Check status code and handle errors
            if ( xhr.status == 200 ) {    // it went well
                fun( xhr.responseText );  // run the function
            } else if ( xhr.status == 404 ) {
                base.showNotFoundError( url );
            } else if ( xhr.status == 500 ) {
                base.showInternalError( url );
            } else {
                base.showUnknownError( xhr.responseText );
            }
            
        }
    };
    xhr.send( null );
}


/*
 * Errorhandling functions for the asynchronous call to the server
 * Instead of alert one can create custom SVG or XHTML to be shown 
 */
base.showNotFoundError = function( url ) {
    alert( '404: No handler found for call to: ' + url );
}

base.showInternalError = function( url ) {
    alert( '505: The server experienced an internal error.\nCheck parameters and CGI script.\n URL: ' + url );
}

base.showUnknownError = function( response ) {
    alert( 'Unknown error: ' + response );
}

/*
 * A dispatch object that executes a number of functions regularly.
 */
base.timedDispatch = function() {
    var timeout = 1000; // default is 1 second
    var timer;

    // Helper object that holds all functions and executes them on request
    var functionManager = function() {
        var funMap ={};
        return {
            add: function( name, fun ) {
                funMap[name] = fun;
            },
            remove: function( name ) {
                delete funMap[name];
            },
            exec: function() {
                for (name in funMap) {
                    if (funMap.hasOwnProperty( name )) {
                        funMap[name]();
                    }
                }
            }
        };
            
    }();
    
    // Return the interface to the dispatch object
    return {
        addFunction: functionManager.add,
        removeFunction: functionManager.remove,
        startTimer: function( timeout ) {
            if (timeout) this.timeout = timeout;
            this.stopTimer();
            timer = setInterval( functionManager.exec, this.timeout );
        },
        stopTimer: function() {
            clearInterval( timer );
        }
    }
}();

